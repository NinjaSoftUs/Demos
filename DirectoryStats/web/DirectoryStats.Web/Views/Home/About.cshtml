@{
    ViewBag.Title = "About";
}

<h1>About</h1>
<h3>Project Description</h3>
<p>
    The purpose of this project is to demonstrate Model-View-Controller (MVC) programing.
    This web application is one of three projects in this solution which contains both a console
    application and a WPF application. It was created using ASP.NET C# and makes use of Bootstrap 3,
    Anglar.JS and log4net. The premise is to allow users to input up to 3 directories and then display
    the aggregate sum of all the file sizes within the specified directories recursively. The business
    logic for aggregating the sums is contained in a shared DLL. This library also has other classes which are
    reused throughout this project and the other projects in the solution. This project was created using 
    the default ASP.NET 4.5 MVC Template using Visual Studio 2015. It has one controller, a
    layout page, three views and one model.
</p>
<h3>Page Layout</h3>
<p>
    The look and feel the site was achieved using CSS from Bootstrap, Bootswatch, and Font Awesome. There
    are three views: Home, Scan and the one you are looking at now, About. Home and About are static views.
    The Scan view is where all the heavy lifting occurs. This is where the user inputs the paths that they
    want to tally. The page has a web form that decorated with Angular.js tags. This is how we achieve a
    responsive design. Web form validation and submission and AJAX page updates are handled by Angular.js
    and some custom Java scripts.
</p>
<h3>Business Logic</h3>
As stated earlier, the business logic for computing the summary data is contained in a common library.
When a user clicks the “Scan” button, Angular.js intercepts the form submit and calls the controller's
“RunScan” action. The controller creates a new instance of a helper class. This helper class implements
Lock-free parallel tasks pattern design (using the Task Parallel Library (TPL)) and returns the results
back to the controller, which in turn hands the model back to Angler. Angular.js performs the data binding and the view update
all on the client side. 

<h3>Other Points of Interest</h3>

<p>
    Logging for this project and other projects in this solution uses log4net. The log4net implementation allows
    for configuration changes on the fly. That is, you can change the logging
    behavior without having to restart the web application. This is very useful when trouble
    shooting production issues.
</p>

<p>
    The directory files size calculations run recursively on their own threads
    using asynchronous methods. Asynchronous programing can increase performance of your application however it
    introduces the risk of race conditions, live lock, dead locks and other types of issues. The most common
    pitfall is a race condition. The easiest way to prevent a race condition is to lock
    the shared resources. This works fine but is not efficient. This project was designed with a lock-free
    approach. There is a Unit Test in the solution used to test async operation to insure the accuracy of the
    results and verifies that no race conditions exist. The unit test first runs the
    calculations using synchronous execution and then runs the same calculation using asynchronous operations.
    Then the output from both operations are compared and are the same.
</p>